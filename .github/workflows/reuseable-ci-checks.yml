#qqqq to do refactor to here

name: Reusable CI Checks

on:
  workflow_call:
    inputs:
      runall:
        required: false
        type: boolean
        default: false
        
env:


  # Permission
  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # PACKAGES_TOKEN: ${{ secrets.NUGETKEY }}
  # GITHUB_USERNAME: "Phil-NHS"

  # Nuget Set Up
  TELBLAZOR_PACKAGE_LOCAL_OUTPUT_PATH: ${{ github.workspace }}/CICDPackageLocation
  TELBLAZOR_PACKAGE_SOURCE: ${{ github.workspace }}/CICDPackageLocation
  #TELBLAZOR_PACKAGE_SOURCE: "https://nuget.pkg.github.com/TechnologyEnhancedLearning/index.json"
  
  # Build Set Up
  USE_TEL_BLAZOR_COMPONENTS_PROJECT_REFERENCE: false
  DISABLE_PACKAGE_GENERATION: true
  
  # Check Dummy Data
  TELBLAZOR_PACKAGE_VERSION: "0.0.0-ci-checks"
  
    
jobs:

    # Build Package
    # Build Solution useing package
    solution-build:
      name: Check Solution Builds
      runs-on: ubuntu-latest
      continue-on-error:  ${{ inputs.runall }}

      steps:
      
        - name: Checkout code
          uses: actions/checkout@v3
        
        - name: Build and Create Package locally
          env:
             #Overwrite package generation
             DISABLE_PACKAGE_GENERATION: false
          run: |
            dotnet build TELBlazor.Components -c Release \
              /p:TELBlazorPackageVersion=$TELBLAZOR_PACKAGE_VERSION \
              /p:NupkgOutputPath=$TELBLAZOR_PACKAGE_LOCAL_OUTPUT_PATH \
              /p:UseTELBlazorComponentsProjectReference=$USE_TEL_BLAZOR_COMPONENTS_PROJECT_REFERENCE \
              /p:TELBlazorPackageSource=$TELBLAZOR_PACKAGE_SOURCE \
              /p:DisablePackageGeneration=$DISABLE_PACKAGE_GENERATION
              
        - name: Build Solution without generating new package
          env:
              #Overwrite package generation
              DISABLE_PACKAGE_GENERATION: true
          run: |
            dotnet build TELBlazor.sln -c Release \
              /p:TELBlazorPackageVersion=$TELBLAZOR_PACKAGE_VERSION \
              /p:NupkgOutputPath=$TELBLAZOR_PACKAGE_LOCAL_OUTPUT_PATH \
              /p:UseTELBlazorComponentsProjectReference=$USE_TEL_BLAZOR_COMPONENTS_PROJECT_REFERENCE \
              /p:TELBlazorPackageSource=$TELBLAZOR_PACKAGE_SOURCE \
              /p:DisablePackageGeneration=$DISABLE_PACKAGE_GENERATION

          
    branch-name-check:
      name: Enforce Branch Name Convention
      if: success() || failure()
      runs-on: ubuntu-latest
      steps:
        - name: Validate Branch Name
          run: |
            #BRANCH_NAME="${GITHUB_HEAD_REF}"
            BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
            echo "Validating branch name: $BRANCH_NAME"

            if [[ "$BRANCH_NAME" =~ ^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test|sample|security|config|bugfix|hotfix)-[a-zA-Z0-9._/-]+$ ]] || [[ "$BRANCH_NAME" == "master" ]]; then
              echo "✅ Branch name is valid"
            else
              echo "❌ Invalid branch name: $BRANCH_NAME"
              echo "Branch names must follow one of the allowed prefixes:"
              echo "   build-*, feat-*, fix-*, bugfix-*, hotfix-*, build-*, chore-*, ci-*, docs-*, perf-*, refactor-*, revert-*, style-*, test-*, sample-*, security-*, config-*, bugfix-*, hotfix-*"
              exit 1
            fi
          continue-on-error:  ${{ inputs.runall }}

    commitlint:
      runs-on: ubuntu-latest
      if: success() || failure()
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - uses: wagoid/commitlint-github-action@v5
          with:
            configFile: .commitlintrc.json
          continue-on-error:  ${{ inputs.runall }}

    Unit-Tests:
        runs-on: ubuntu-latest
        if: success() || failure()
        steps:
          - name: See other project pipeline for Tests
            run: echo " See other project pipeline for Tests this is a placeholder"
            continue-on-error:  ${{ inputs.runall }}
          
  
    E2E-Tests:
        runs-on: ubuntu-latest
        if: success() || failure()
        steps:
          - name: See other project pipeline for Tests
            run: echo " See other project pipeline for Tests this is a placeholder"
            continue-on-error:  ${{ inputs.runall }}
 
    Code-Coverage:
        runs-on: ubuntu-latest
        if: success() || failure()
        steps:
          - name: See other project pipeline for Tests
            run: echo " See other project pipeline for Tests this is a placeholder"
            continue-on-error:  ${{ inputs.runall }}       
          
    Check-For-Fails:
      name: Fail check if running allowed
      if: ${{ inputs.runall }}
      needs:
        - solution-build
        - branch-name-check
        - commitlint
        - Unit-Tests
        - E2E-Tests
        - Code-Coverage
      
      runs-on: ubuntu-latest
      steps:
        - name: Check-For-Fails
          run: echo "TODO Code Coverage"
          
        - name: Check Job Results
          run: |
            echo "Solution Build: ${{ needs.solution-build.result }}"
            echo "Branch Name Check: ${{ needs.branch-name-check.result }}"
            echo "Commitlint: ${{ needs.commitlint.result }}"
            echo "Unit Tests: ${{ needs.Unit-Tests.result }}"
            echo "E2E Tests: ${{ needs.E2E-Tests.result }}"
            echo "Code Coverage: ${{ needs.Code-Coverage.result }}"

            if [[ "${{ needs.solution-build.result }}" != "success" || \
                  "${{ needs.branch-name-check.result }}" != "success" || \
                  "${{ needs.commitlint.result }}" != "success" || \
                  "${{ needs.Unit-Tests.result }}" != "success" || \
                  "${{ needs.E2E-Tests.result }}" != "success" || \
                  "${{ needs.Code-Coverage.result }}" != "success" ]]; then
              echo "❌ One or more jobs failed."
              exit 1
            fi
          continue-on-error: false
